#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyTuVanTuyenSinh
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_Tuyen_Sinh")]
	public partial class QL_Tuyen_SinhDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertStudentInfo(StudentInfo instance);
    partial void UpdateStudentInfo(StudentInfo instance);
    partial void DeleteStudentInfo(StudentInfo instance);
    partial void InsertCampus(Campus instance);
    partial void UpdateCampus(Campus instance);
    partial void DeleteCampus(Campus instance);
    partial void InsertAdmissionRecord(AdmissionRecord instance);
    partial void UpdateAdmissionRecord(AdmissionRecord instance);
    partial void DeleteAdmissionRecord(AdmissionRecord instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    #endregion
		
		public QL_Tuyen_SinhDataContext() : 
				base(global::QuanLyTuVanTuyenSinh.Properties.Settings.Default.QL_Tuyen_SinhConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QL_Tuyen_SinhDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_Tuyen_SinhDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_Tuyen_SinhDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_Tuyen_SinhDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<StudentInfo> StudentInfos
		{
			get
			{
				return this.GetTable<StudentInfo>();
			}
		}
		
		public System.Data.Linq.Table<Campus> Campus
		{
			get
			{
				return this.GetTable<Campus>();
			}
		}
		
		public System.Data.Linq.Table<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this.GetTable<AdmissionRecord>();
			}
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _Email;
		
		private string _Phone;
		
		private byte _Status;
		
		private System.DateTime _CreatedDate;
		
		private byte _RoleID;
		
		private EntitySet<StudentInfo> _StudentInfos;
		
		private EntitySet<StudentInfo> _StudentInfos1;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnRoleIDChanging(byte value);
    partial void OnRoleIDChanged();
    #endregion
		
		public User()
		{
			this._StudentInfos = new EntitySet<StudentInfo>(new Action<StudentInfo>(this.attach_StudentInfos), new Action<StudentInfo>(this.detach_StudentInfos));
			this._StudentInfos1 = new EntitySet<StudentInfo>(new Action<StudentInfo>(this.attach_StudentInfos1), new Action<StudentInfo>(this.detach_StudentInfos1));
			this._AdmissionRecords = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords), new Action<AdmissionRecord>(this.detach_AdmissionRecords));
			this._AdmissionRecords1 = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords1), new Action<AdmissionRecord>(this.detach_AdmissionRecords1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="TinyInt NOT NULL")]
		public byte RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentInfo", Storage="_StudentInfos", ThisKey="UserID", OtherKey="ParentUserID")]
		public EntitySet<StudentInfo> StudentInfos
		{
			get
			{
				return this._StudentInfos;
			}
			set
			{
				this._StudentInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentInfo1", Storage="_StudentInfos1", ThisKey="UserID", OtherKey="StudentUserID")]
		public EntitySet<StudentInfo> StudentInfos1
		{
			get
			{
				return this._StudentInfos1;
			}
			set
			{
				this._StudentInfos1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdmissionRecord", Storage="_AdmissionRecords", ThisKey="UserID", OtherKey="ApprovedByAdminID")]
		public EntitySet<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this._AdmissionRecords;
			}
			set
			{
				this._AdmissionRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdmissionRecord1", Storage="_AdmissionRecords1", ThisKey="UserID", OtherKey="ParentUserID")]
		public EntitySet<AdmissionRecord> AdmissionRecords1
		{
			get
			{
				return this._AdmissionRecords1;
			}
			set
			{
				this._AdmissionRecords1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentInfos(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudentInfos(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudentInfos1(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_StudentInfos1(StudentInfo entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AdmissionRecords1(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_AdmissionRecords1(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentInfo")]
	public partial class StudentInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoID;
		
		private int _StudentUserID;
		
		private System.Nullable<int> _ParentUserID;
		
		private string _FullName;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _Address;
		
		private System.Nullable<bool> _Gender;
		
		private string _NationalID;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoIDChanging(int value);
    partial void OnInfoIDChanged();
    partial void OnStudentUserIDChanging(int value);
    partial void OnStudentUserIDChanged();
    partial void OnParentUserIDChanging(System.Nullable<int> value);
    partial void OnParentUserIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    #endregion
		
		public StudentInfo()
		{
			this._AdmissionRecords = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords), new Action<AdmissionRecord>(this.detach_AdmissionRecords));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InfoID
		{
			get
			{
				return this._InfoID;
			}
			set
			{
				if ((this._InfoID != value))
				{
					this.OnInfoIDChanging(value);
					this.SendPropertyChanging();
					this._InfoID = value;
					this.SendPropertyChanged("InfoID");
					this.OnInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentUserID", DbType="Int NOT NULL")]
		public int StudentUserID
		{
			get
			{
				return this._StudentUserID;
			}
			set
			{
				if ((this._StudentUserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentUserIDChanging(value);
					this.SendPropertyChanging();
					this._StudentUserID = value;
					this.SendPropertyChanged("StudentUserID");
					this.OnStudentUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentUserID", DbType="Int")]
		public System.Nullable<int> ParentUserID
		{
			get
			{
				return this._ParentUserID;
			}
			set
			{
				if ((this._ParentUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentUserIDChanging(value);
					this.SendPropertyChanging();
					this._ParentUserID = value;
					this.SendPropertyChanged("ParentUserID");
					this.OnParentUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalID", DbType="NVarChar(20)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_AdmissionRecord", Storage="_AdmissionRecords", ThisKey="InfoID", OtherKey="StudentInfoID")]
		public EntitySet<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this._AdmissionRecords;
			}
			set
			{
				this._AdmissionRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentInfo", Storage="_User", ThisKey="ParentUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudentInfos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudentInfos.Add(this);
						this._ParentUserID = value.UserID;
					}
					else
					{
						this._ParentUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentInfo1", Storage="_User1", ThisKey="StudentUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.StudentInfos1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.StudentInfos1.Add(this);
						this._StudentUserID = value.UserID;
					}
					else
					{
						this._StudentUserID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = this;
		}
		
		private void detach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.StudentInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Campus")]
	public partial class Campus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampusID;
		
		private string _CampusName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Website;
		
		private string _Email;
		
		private EntitySet<Major> _Majors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampusIDChanging(int value);
    partial void OnCampusIDChanged();
    partial void OnCampusNameChanging(string value);
    partial void OnCampusNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Campus()
		{
			this._Majors = new EntitySet<Major>(new Action<Major>(this.attach_Majors), new Action<Major>(this.detach_Majors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CampusID
		{
			get
			{
				return this._CampusID;
			}
			set
			{
				if ((this._CampusID != value))
				{
					this.OnCampusIDChanging(value);
					this.SendPropertyChanging();
					this._CampusID = value;
					this.SendPropertyChanged("CampusID");
					this.OnCampusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CampusName
		{
			get
			{
				return this._CampusName;
			}
			set
			{
				if ((this._CampusName != value))
				{
					this.OnCampusNameChanging(value);
					this.SendPropertyChanging();
					this._CampusName = value;
					this.SendPropertyChanged("CampusName");
					this.OnCampusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(200)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Major", Storage="_Majors", ThisKey="CampusID", OtherKey="CampusID")]
		public EntitySet<Major> Majors
		{
			get
			{
				return this._Majors;
			}
			set
			{
				this._Majors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Campus = this;
		}
		
		private void detach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Campus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdmissionRecord")]
	public partial class AdmissionRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private int _StudentInfoID;
		
		private int _MajorID;
		
		private System.DateTime _RegistrationDate;
		
		private byte _ResultStatus;
		
		private System.Nullable<decimal> _ExamScore;
		
		private System.Nullable<System.DateTime> _ResultUpdateDate;
		
		private System.Nullable<int> _ApprovedByAdminID;
		
		private System.Nullable<int> _ParentUserID;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<StudentInfo> _StudentInfo;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnStudentInfoIDChanging(int value);
    partial void OnStudentInfoIDChanged();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnResultStatusChanging(byte value);
    partial void OnResultStatusChanged();
    partial void OnExamScoreChanging(System.Nullable<decimal> value);
    partial void OnExamScoreChanged();
    partial void OnResultUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResultUpdateDateChanged();
    partial void OnApprovedByAdminIDChanging(System.Nullable<int> value);
    partial void OnApprovedByAdminIDChanged();
    partial void OnParentUserIDChanging(System.Nullable<int> value);
    partial void OnParentUserIDChanged();
    #endregion
		
		public AdmissionRecord()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._StudentInfo = default(EntityRef<StudentInfo>);
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInfoID", DbType="Int NOT NULL")]
		public int StudentInfoID
		{
			get
			{
				return this._StudentInfoID;
			}
			set
			{
				if ((this._StudentInfoID != value))
				{
					if (this._StudentInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInfoIDChanging(value);
					this.SendPropertyChanging();
					this._StudentInfoID = value;
					this.SendPropertyChanged("StudentInfoID");
					this.OnStudentInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int NOT NULL")]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultStatus", DbType="TinyInt NOT NULL")]
		public byte ResultStatus
		{
			get
			{
				return this._ResultStatus;
			}
			set
			{
				if ((this._ResultStatus != value))
				{
					this.OnResultStatusChanging(value);
					this.SendPropertyChanging();
					this._ResultStatus = value;
					this.SendPropertyChanged("ResultStatus");
					this.OnResultStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamScore", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> ExamScore
		{
			get
			{
				return this._ExamScore;
			}
			set
			{
				if ((this._ExamScore != value))
				{
					this.OnExamScoreChanging(value);
					this.SendPropertyChanging();
					this._ExamScore = value;
					this.SendPropertyChanged("ExamScore");
					this.OnExamScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultUpdateDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ResultUpdateDate
		{
			get
			{
				return this._ResultUpdateDate;
			}
			set
			{
				if ((this._ResultUpdateDate != value))
				{
					this.OnResultUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._ResultUpdateDate = value;
					this.SendPropertyChanged("ResultUpdateDate");
					this.OnResultUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedByAdminID", DbType="Int")]
		public System.Nullable<int> ApprovedByAdminID
		{
			get
			{
				return this._ApprovedByAdminID;
			}
			set
			{
				if ((this._ApprovedByAdminID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByAdminIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovedByAdminID = value;
					this.SendPropertyChanged("ApprovedByAdminID");
					this.OnApprovedByAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentUserID", DbType="Int")]
		public System.Nullable<int> ParentUserID
		{
			get
			{
				return this._ParentUserID;
			}
			set
			{
				if ((this._ParentUserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentUserIDChanging(value);
					this.SendPropertyChanging();
					this._ParentUserID = value;
					this.SendPropertyChanged("ParentUserID");
					this.OnParentUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdmissionRecord_Payment", Storage="_Payments", ThisKey="RecordID", OtherKey="RecordID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdmissionRecord", Storage="_User", ThisKey="ApprovedByAdminID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AdmissionRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords.Add(this);
						this._ApprovedByAdminID = value.UserID;
					}
					else
					{
						this._ApprovedByAdminID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdmissionRecord1", Storage="_User1", ThisKey="ParentUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.AdmissionRecords1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords1.Add(this);
						this._ParentUserID = value.UserID;
					}
					else
					{
						this._ParentUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentInfo_AdmissionRecord", Storage="_StudentInfo", ThisKey="StudentInfoID", OtherKey="InfoID", IsForeignKey=true)]
		public StudentInfo StudentInfo
		{
			get
			{
				return this._StudentInfo.Entity;
			}
			set
			{
				StudentInfo previousValue = this._StudentInfo.Entity;
				if (((previousValue != value) 
							|| (this._StudentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentInfo.Entity = null;
						previousValue.AdmissionRecords.Remove(this);
					}
					this._StudentInfo.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords.Add(this);
						this._StudentInfoID = value.InfoID;
					}
					else
					{
						this._StudentInfoID = default(int);
					}
					this.SendPropertyChanged("StudentInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_AdmissionRecord", Storage="_Major", ThisKey="MajorID", OtherKey="MajorID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.AdmissionRecords.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.AdmissionRecords.Add(this);
						this._MajorID = value.MajorID;
					}
					else
					{
						this._MajorID = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.AdmissionRecord = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.AdmissionRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MajorID;
		
		private int _CampusID;
		
		private string _MajorName;
		
		private decimal _TuitionFee;
		
		private string _Description;
		
		private string _ImagePath;
		
		private EntitySet<AdmissionRecord> _AdmissionRecords;
		
		private EntityRef<Campus> _Campus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnCampusIDChanging(int value);
    partial void OnCampusIDChanged();
    partial void OnMajorNameChanging(string value);
    partial void OnMajorNameChanged();
    partial void OnTuitionFeeChanging(decimal value);
    partial void OnTuitionFeeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public Major()
		{
			this._AdmissionRecords = new EntitySet<AdmissionRecord>(new Action<AdmissionRecord>(this.attach_AdmissionRecords), new Action<AdmissionRecord>(this.detach_AdmissionRecords));
			this._Campus = default(EntityRef<Campus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusID", DbType="Int NOT NULL")]
		public int CampusID
		{
			get
			{
				return this._CampusID;
			}
			set
			{
				if ((this._CampusID != value))
				{
					if (this._Campus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampusIDChanging(value);
					this.SendPropertyChanging();
					this._CampusID = value;
					this.SendPropertyChanged("CampusID");
					this.OnCampusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MajorName
		{
			get
			{
				return this._MajorName;
			}
			set
			{
				if ((this._MajorName != value))
				{
					this.OnMajorNameChanging(value);
					this.SendPropertyChanging();
					this._MajorName = value;
					this.SendPropertyChanged("MajorName");
					this.OnMajorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TuitionFee", DbType="Decimal(18,2) NOT NULL")]
		public decimal TuitionFee
		{
			get
			{
				return this._TuitionFee;
			}
			set
			{
				if ((this._TuitionFee != value))
				{
					this.OnTuitionFeeChanging(value);
					this.SendPropertyChanging();
					this._TuitionFee = value;
					this.SendPropertyChanged("TuitionFee");
					this.OnTuitionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(255)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_AdmissionRecord", Storage="_AdmissionRecords", ThisKey="MajorID", OtherKey="MajorID")]
		public EntitySet<AdmissionRecord> AdmissionRecords
		{
			get
			{
				return this._AdmissionRecords;
			}
			set
			{
				this._AdmissionRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Major", Storage="_Campus", ThisKey="CampusID", OtherKey="CampusID", IsForeignKey=true)]
		public Campus Campus
		{
			get
			{
				return this._Campus.Entity;
			}
			set
			{
				Campus previousValue = this._Campus.Entity;
				if (((previousValue != value) 
							|| (this._Campus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campus.Entity = null;
						previousValue.Majors.Remove(this);
					}
					this._Campus.Entity = value;
					if ((value != null))
					{
						value.Majors.Add(this);
						this._CampusID = value.CampusID;
					}
					else
					{
						this._CampusID = default(int);
					}
					this.SendPropertyChanged("Campus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_AdmissionRecords(AdmissionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _RecordID;
		
		private decimal _Amount;
		
		private System.DateTime _PaymentDate;
		
		private byte _Method;
		
		private byte _Status;
		
		private string _BillImagePath;
		
		private EntityRef<AdmissionRecord> _AdmissionRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnMethodChanging(byte value);
    partial void OnMethodChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnBillImagePathChanging(string value);
    partial void OnBillImagePathChanged();
    #endregion
		
		public Payment()
		{
			this._AdmissionRecord = default(EntityRef<AdmissionRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", DbType="Int NOT NULL")]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					if (this._AdmissionRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="TinyInt NOT NULL")]
		public byte Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillImagePath", DbType="NVarChar(MAX)")]
		public string BillImagePath
		{
			get
			{
				return this._BillImagePath;
			}
			set
			{
				if ((this._BillImagePath != value))
				{
					this.OnBillImagePathChanging(value);
					this.SendPropertyChanging();
					this._BillImagePath = value;
					this.SendPropertyChanged("BillImagePath");
					this.OnBillImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdmissionRecord_Payment", Storage="_AdmissionRecord", ThisKey="RecordID", OtherKey="RecordID", IsForeignKey=true)]
		public AdmissionRecord AdmissionRecord
		{
			get
			{
				return this._AdmissionRecord.Entity;
			}
			set
			{
				AdmissionRecord previousValue = this._AdmissionRecord.Entity;
				if (((previousValue != value) 
							|| (this._AdmissionRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdmissionRecord.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._AdmissionRecord.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._RecordID = value.RecordID;
					}
					else
					{
						this._RecordID = default(int);
					}
					this.SendPropertyChanged("AdmissionRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
